
Aufgabe_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d73  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4b  00000000  00000000  0000110b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000420  00000000  00000000  00001d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000101  00000000  00000000  00002792  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	dc c0       	rjmp	.+440    	; 0x20a <__vector_20>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 30       	cpi	r26, 0x04	; 4
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	42 d0       	rcall	.+132    	; 0x18a <main>
 106:	bb c0       	rjmp	.+374    	; 0x27e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <addVal>:
volatile bool state = false;
bool timerStart = false;

void addVal(uint8_t val){
	uint8_t addValue=0;
	switch(val){
 10a:	82 30       	cpi	r24, 0x02	; 2
 10c:	31 f0       	breq	.+12     	; 0x11a <addVal+0x10>
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	31 f0       	breq	.+12     	; 0x11e <addVal+0x14>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	31 f0       	breq	.+12     	; 0x122 <addVal+0x18>
volatile uint16_t counter=0;
volatile bool state = false;
bool timerStart = false;

void addVal(uint8_t val){
	uint8_t addValue=0;
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <addVal+0x1a>
	switch(val){
		case 0b1:addValue=1;break;		//0.25 sec
		case 0b10:addValue=4;break;		//1 sec
 11a:	94 e0       	ldi	r25, 0x04	; 4
 11c:	03 c0       	rjmp	.+6      	; 0x124 <addVal+0x1a>
		case 0b100:addValue=40;break;	//10sec
 11e:	98 e2       	ldi	r25, 0x28	; 40
 120:	01 c0       	rjmp	.+2      	; 0x124 <addVal+0x1a>
bool timerStart = false;

void addVal(uint8_t val){
	uint8_t addValue=0;
	switch(val){
		case 0b1:addValue=1;break;		//0.25 sec
 122:	91 e0       	ldi	r25, 0x01	; 1
		case 0b100:addValue=40;break;	//10sec
	}
	
	
	
	if (counter<=156)   // Hier müsste es 80 (sprich 20 Seconden) statt 156 stehen.
 124:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <counter>
 128:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <counter+0x1>
 12c:	2d 39       	cpi	r18, 0x9D	; 157
 12e:	31 05       	cpc	r19, r1
 130:	70 f4       	brcc	.+28     	; 0x14e <addVal+0x44>
						// Aber wenn es hier 80 steht, kann der Timer kommischerweise nur 10 Seconden zählen. 
						// Ich bin auf die Zahl 156 durch Try and Error gekommen.
	{
		counter=counter+addValue;
 132:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <counter>
 136:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <counter+0x1>
 13a:	29 0f       	add	r18, r25
 13c:	31 1d       	adc	r19, r1
 13e:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <counter+0x1>
 142:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <counter>
		PORT_LED=~val;
 146:	98 2f       	mov	r25, r24
 148:	90 95       	com	r25
 14a:	92 b9       	out	0x02, r25	; 2
 14c:	03 c0       	rjmp	.+6      	; 0x154 <addVal+0x4a>
	}
	
	else{
		timerStart = true;
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	
	if (val==0b1000)
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	49 f4       	brne	.+18     	; 0x16a <addVal+0x60>
	{counter=0;
 158:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <counter+0x1>
 15c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <counter>
		PORT_LED=~val;
 160:	98 2f       	mov	r25, r24
 162:	90 95       	com	r25
 164:	92 b9       	out	0x02, r25	; 2
		timerStart = false;
 166:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	while(SW_Pin==val);
 16a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 16e:	89 17       	cp	r24, r25
 170:	e1 f3       	breq	.-8      	; 0x16a <addVal+0x60>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	89 e6       	ldi	r24, 0x69	; 105
 176:	98 e1       	ldi	r25, 0x18	; 24
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <addVal+0x6e>
 180:	00 c0       	rjmp	.+0      	; 0x182 <addVal+0x78>
 182:	00 00       	nop
	_delay_ms(500);
	PORT_LED=0xFF;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	82 b9       	out	0x02, r24	; 2
 188:	08 95       	ret

0000018a <main>:
}

int main(void)
{

	DDR_LED = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	81 b9       	out	0x01, r24	; 1
	PORT_LED = 0xFF;		//all led are off
 18e:	82 b9       	out	0x02, r24	; 2

	TCCR1B|=(1<<CS12);
 190:	e1 e8       	ldi	r30, 0x81	; 129
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	84 60       	ori	r24, 0x04	; 4
 198:	80 83       	st	Z, r24
	TCNT1=57723;
 19a:	8b e7       	ldi	r24, 0x7B	; 123
 19c:	91 ee       	ldi	r25, 0xE1	; 225
 19e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 1a2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TIMSK1|=(1<<TOV1);
 1a6:	ef e6       	ldi	r30, 0x6F	; 111
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 83       	st	Z, r24
	sei();
 1b0:	78 94       	sei


	
	while (1)
	{
		if (((~SW_Pin)&0b1111)&&!state)
 1b2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	80 95       	com	r24
 1ba:	90 95       	com	r25
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	99 27       	eor	r25, r25
 1c0:	89 2b       	or	r24, r25
 1c2:	49 f0       	breq	.+18     	; 0x1d6 <main+0x4c>
 1c4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <state>
 1c8:	81 11       	cpse	r24, r1
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <main+0x4c>
		{
			addVal((~SW_Pin)&0b1111);
 1cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 1d0:	80 95       	com	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	9a df       	rcall	.-204    	; 0x10a <addVal>
			
		}
		if ((!(SW_Pin&(1<<SW7)))&(!timerStart))
 1d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 1da:	80 95       	com	r24
 1dc:	88 1f       	adc	r24, r24
 1de:	88 27       	eor	r24, r24
 1e0:	88 1f       	adc	r24, r24
 1e2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1e6:	98 17       	cp	r25, r24
 1e8:	20 f7       	brcc	.-56     	; 0x1b2 <main+0x28>
		{
			PORT_LED&=~(1<<SW7LED);
 1ea:	82 b1       	in	r24, 0x02	; 2
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	82 b9       	out	0x02, r24	; 2
			while(!(SW_Pin&(1<<SW7)));
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 1f4:	88 23       	and	r24, r24
 1f6:	e4 f7       	brge	.-8      	; 0x1f0 <main+0x66>
			PORT_LED=0xFF;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	82 b9       	out	0x02, r24	; 2
			state=!state;
 1fc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	89 27       	eor	r24, r25
 204:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
 208:	d4 cf       	rjmp	.-88     	; 0x1b2 <main+0x28>

0000020a <__vector_20>:
		}
	}
}
ISR(TIMER1_OVF_vect){
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25

	if (state)
 218:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <state>
 21c:	88 23       	and	r24, r24
 21e:	11 f1       	breq	.+68     	; 0x264 <__vector_20+0x5a>
	{ if (counter>0)
 220:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <counter>
 224:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <counter+0x1>
 228:	89 2b       	or	r24, r25
 22a:	61 f0       	breq	.+24     	; 0x244 <__vector_20+0x3a>
		{counter--;
 22c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <counter>
 230:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <counter+0x1>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <counter+0x1>
 23a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <counter>
			PORT_LED^=(1<<SW0LED)|(1<<SW1LED)|(1<<SW2LED)|(1<<SW3LED)|(1<<SW4LED)|(1<<SW5LED)|(1<<SW6LED)|(1<<SW7LED);
 23e:	82 b1       	in	r24, 0x02	; 2
 240:	80 95       	com	r24
 242:	82 b9       	out	0x02, r24	; 2
		}

		if (counter<=0)
 244:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <counter>
 248:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <counter+0x1>
 24c:	89 2b       	or	r24, r25
 24e:	51 f4       	brne	.+20     	; 0x264 <__vector_20+0x5a>
		{
			PORT_LED=0xFF; // off
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	82 b9       	out	0x02, r24	; 2
			state=!state;
 254:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	89 27       	eor	r24, r25
 25c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
			timerStart = false;
 260:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
		}
	}
	TCNT1=57723;
 264:	8b e7       	ldi	r24, 0x7B	; 123
 266:	91 ee       	ldi	r25, 0xE1	; 225
 268:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 26c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
}
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
